('Nblts:', 6)
('Nfreqs:', 1)
Generating Baselines
Making Meshgrid
Raveling
Making Tasks
('Number of tasks:', 6)
100% |########################################################################|
Splitting Task List
Sending Tasks To Processing Units
Tasks Received. Begin Calculations.
Only one frequency in UVBeam so cannot interpolate. Just using that frequency instead.
Only one frequency in UVBeam so cannot interpolate. Just using that frequency instead.
Only one frequency in UVBeam so cannot interpolate. Just using that frequency instead.
100% |########################################################################|
Calculations Complete.
('Nblts:', 6)
('Nfreqs:', 1)
Generating Baselines
Making Meshgrid
Raveling
Making Tasks
('Number of tasks:', 60)
100% |########################################################################|
Splitting Task List
Sending Tasks To Processing Units
Tasks Received. Begin Calculations.
100% |########################################################################|
Calculations Complete.
('Nblts:', 6)
('Nfreqs:', 1)
Generating Baselines
Making Meshgrid
Raveling
Making Tasks
('Number of tasks:', 600)
100% |########################################################################|
Splitting Task List
Sending Tasks To Processing Units
Tasks Received. Begin Calculations.
100% |########################################################################|
Calculations Complete.
Filename: /Users/djacobs/anaconda/envs/HERA/lib/python2.7/site-packages/pyuvsim-0.0.1-py2.7.egg/pyuvsim/uvsim.py

Line #    Mem usage    Increment   Line Contents
================================================
    90  177.238 MiB 18792.871 MiB       @profile
    91                                 def __init__(self, name, ra, dec, freq, stokes):
    92                                     """
    93                                     Initialize from source catalog
    94
    95                                     Args:
    96                                         name: Unique identifier for the source.
    97                                         ra: astropy Angle object
    98                                             source RA in J2000 (or ICRS) coordinates
    99                                         dec: astropy Angle object
   100                                             source Dec in J2000 (or ICRS) coordinates
   101                                         stokes:
   102                                             4 element vector giving the source [I, Q, U, V]
   103                                         freq: astropy quantity
   104                                             frequency of source catalog value
   105                                     """
   106  177.238 MiB -819.531 MiB           if not isinstance(ra, Angle):
   107                                         raise ValueError('ra must be an astropy Angle object. '
   108                                                          'value was: {ra}'.format(ra=ra))
   109
   110  177.238 MiB -819.531 MiB           if not isinstance(dec, Angle):
   111                                         raise ValueError('dec must be an astropy Angle object. '
   112                                                          'value was: {dec}'.format(dec=dec))
   113
   114  177.238 MiB -819.531 MiB           if not isinstance(freq, Quantity):
   115                                         raise ValueError('freq must be an astropy Quantity object. '
   116                                                          'value was: {f}'.format(f=freq))
   117
   118  177.238 MiB -819.531 MiB           self.name = name
   119  177.238 MiB -819.531 MiB           self.freq = freq
   120  177.238 MiB -819.531 MiB           self.stokes = stokes
   121  177.238 MiB -819.531 MiB           self.ra = ra
   122  177.238 MiB -819.531 MiB           self.dec = dec
   123
   124  177.238 MiB -819.527 MiB           self.skycoord = SkyCoord(self.ra, self.dec, frame='icrs')
   125
   126                                     # The coherency is a 2x2 matrix giving electric field correlation in Jy.
   127                                     # Multiply by .5 to ensure that Trace sums to I not 2*I
   128  177.238 MiB -819.531 MiB           self.coherency_radec = .5 * np.array([[self.stokes[0] + self.stokes[1],
   129  177.238 MiB -819.531 MiB                                                  self.stokes[2] - 1j * self.stokes[3]],
   130  177.238 MiB -819.531 MiB                                                 [self.stokes[2] + 1j * self.stokes[3],
   131  177.238 MiB -819.531 MiB                                                  self.stokes[0] - self.stokes[1]]])


Filename: /Users/djacobs/anaconda/envs/HERA/lib/python2.7/site-packages/pyuvsim-0.0.1-py2.7.egg/pyuvsim/uvsim.py

Line #    Mem usage    Increment   Line Contents
================================================
   140  175.109 MiB 34253.434 MiB       @profile
   141                                 def coherency_calc(self, time, telescope_location):
   142                                     """
   143                                     Calculate the local coherency in az/za basis for this source at a time & location.
   144
   145                                     The coherency is a 2x2 matrix giving electric field correlation in Jy.
   146                                     It's specified on the object as a coherency in the ra/dec basis,
   147                                     but must be rotated into local az/za.
   148
   149                                     Args:
   150                                         time: astropy Time object
   151                                         telescope_location: astropy EarthLocation object
   152
   153                                     Returns:
   154                                         local coherency in az/za basis
   155                                     """
   156  175.109 MiB -4607.988 MiB           if not isinstance(time, Time):
   157                                         raise ValueError('time must be an astropy Time object. '
   158                                                          'value was: {t}'.format(t=time))
   159
   160  175.109 MiB -4607.988 MiB           if not isinstance(telescope_location, EarthLocation):
   161                                         raise ValueError('telescope_location must be an astropy EarthLocation object. '
   162                                                          'value was: {al}'.format(al=telescope_location))
   163
   164  175.109 MiB -4607.988 MiB           if np.sum(np.abs(self.stokes[1:])) == 0:
   165  175.109 MiB -4607.988 MiB               rotation_matrix = np.array([[1, 0], [0, 1]])
   166                                     else:
   167                                         # First need to calculate the sin & cos of the parallactic angle
   168                                         # See Meeus's astronomical algorithms eq 14.1
   169                                         # also see Astroplan.observer.parallactic_angle method
   170                                         time.location = telescope_location
   171                                         lst = time.sidereal_time('apparent')
   172
   173                                         cirs_source_coord = self.skycoord.transform_to('cirs')
   174                                         tee_ra = cirs_to_tee_ra(cirs_source_coord.ra, time)
   175
   176                                         hour_angle = (lst - tee_ra).rad
   177                                         sinX = np.sin(hour_angle)
   178                                         cosX = np.tan(telescope_location.lat) * np.cos(self.dec) - np.sin(self.dec) * np.cos(hour_angle)
   179
   180                                         rotation_matrix = np.array([[cosX, sinX], [-sinX, cosX]])
   181
   182  175.109 MiB -4607.988 MiB           coherency_local = np.einsum('ab,bc,cd->ad', rotation_matrix.T,
   183  175.109 MiB -4607.977 MiB                                       self.coherency_radec, rotation_matrix)
   184
   185  175.109 MiB -4607.988 MiB           return coherency_local


Filename: /Users/djacobs/anaconda/envs/HERA/lib/python2.7/site-packages/pyuvsim-0.0.1-py2.7.egg/pyuvsim/uvsim.py

Line #    Mem usage    Increment   Line Contents
================================================
   187  205.137 MiB 102951.547 MiB       @profile
   188                                 def az_za_calc(self, time, telescope_location):
   189                                     """
   190                                     calculate the azimuth & zenith angle for this source at a time & location
   191
   192                                     Args:
   193                                         time: astropy Time object
   194                                         telescope_location: astropy EarthLocation object
   195
   196                                     Returns:
   197                                         (azimuth, zenith_angle) in radians
   198                                     """
   199  205.137 MiB -33446.570 MiB           if not isinstance(time, Time):
   200                                         raise ValueError('time must be an astropy Time object. '
   201                                                          'value was: {t}'.format(t=time))
   202
   203  205.137 MiB -33446.570 MiB           if not isinstance(telescope_location, EarthLocation):
   204                                         raise ValueError('telescope_location must be an astropy EarthLocation object. '
   205                                                          'value was: {al}'.format(al=telescope_location))
   206
   207  205.141 MiB -33567.211 MiB           source_altaz = self.skycoord.transform_to(AltAz(obstime=time, location=telescope_location))
   208
   209  205.141 MiB -33569.820 MiB           az_za = (source_altaz.az.rad, source_altaz.zen.rad)
   210  205.141 MiB -33569.820 MiB           self.az_za = az_za
   211  205.141 MiB -33569.820 MiB           return az_za


Filename: /Users/djacobs/anaconda/envs/HERA/lib/python2.7/site-packages/pyuvsim-0.0.1-py2.7.egg/pyuvsim/uvsim.py

Line #    Mem usage    Increment   Line Contents
================================================
   213  175.109 MiB 34253.488 MiB       @profile
   214                                 def pos_lmn(self, time, telescope_location):
   215                                     """
   216                                     calculate the direction cosines of this source at a time & location
   217
   218                                     Args:
   219                                         time: astropy Time object
   220                                         telescope_location: astropy EarthLocation object
   221
   222                                     Returns:
   223                                         (l, m, n) direction cosine values
   224                                     """
   225                                     # calculate direction cosines of source at current time and array location
   226  175.109 MiB 34197.434 MiB           az_za = self.az_za_calc(time, telescope_location)
   227
   228  175.109 MiB -4664.008 MiB           pos_l = np.sin(az_za[0]) * np.sin(az_za[1])
   229  175.109 MiB -4664.008 MiB           pos_m = np.cos(az_za[0]) * np.sin(az_za[1])
   230  175.109 MiB -4664.008 MiB           pos_n = np.cos(az_za[1])
   231  175.109 MiB -4664.008 MiB           return (pos_l, pos_m, pos_n)


Filename: /Users/djacobs/anaconda/envs/HERA/lib/python2.7/site-packages/pyuvsim-0.0.1-py2.7.egg/pyuvsim/uvsim.py

Line #    Mem usage    Increment   Line Contents
================================================
   235  177.238 MiB  462.477 MiB       @profile
   236                                 def __init__(self, telescope_name, telescope_location, beam_list):
   237                                     # telescope location (EarthLocation object)
   238  177.238 MiB   -8.195 MiB           self.telescope_location = telescope_location
   239  177.238 MiB   -8.195 MiB           self.telescope_name = telescope_name
   240
   241                                     # list of UVBeam objects, length of number of unique beams
   242  177.238 MiB   -8.195 MiB           self.beam_list = beam_list


Filename: /Users/djacobs/anaconda/envs/HERA/lib/python2.7/site-packages/pyuvsim-0.0.1-py2.7.egg/pyuvsim/uvsim.py

Line #    Mem usage    Increment   Line Contents
================================================
   295  177.238 MiB 1387.441 MiB       @profile
   296                                 def __init__(self, name, number, enu_position, beam_id):
   297  177.238 MiB  -24.586 MiB           self.name = name
   298  177.238 MiB  -24.586 MiB           self.number = number
   299                                     # ENU position in meters relative to the telescope_location
   300  177.238 MiB  -24.586 MiB           self.pos_enu = enu_position * units.m
   301                                     # index of beam for this antenna from array.beam_list
   302  177.238 MiB  -24.586 MiB           self.beam_id = beam_id


Filename: /Users/djacobs/anaconda/envs/HERA/lib/python2.7/site-packages/pyuvsim-0.0.1-py2.7.egg/pyuvsim/uvsim.py

Line #    Mem usage    Increment   Line Contents
================================================
   304  205.141 MiB 68633.473 MiB       @profile
   305                                 def get_beam_jones(self, array, source_az_za, frequency):
   306                                     # get_direction_jones needs to be defined on UVBeam
   307                                     # 2x2 array of Efield vectors in Az/ZA
   308                                     # return array.beam_list[self.beam_id].get_direction_jones(source_lmn, frequency)
   309
   310  205.141 MiB -22298.898 MiB           source_az = np.array([source_az_za[0]])
   311  205.141 MiB -22298.898 MiB           source_za = np.array([source_az_za[1]])
   312  205.141 MiB -22298.898 MiB           freq = np.array([frequency.to('Hz').value])
   313
   314  205.141 MiB -22298.898 MiB           if array.beam_list[self.beam_id].data_normalization != 'peak':
   315  205.141 MiB   -1.582 MiB               array.beam_list[self.beam_id].peak_normalize()
   316  205.141 MiB -22298.898 MiB           array.beam_list[self.beam_id].interpolation_function = 'az_za_simple'
   317
   318                                     interp_data, interp_basis_vector = \
   319  205.141 MiB -22298.898 MiB               array.beam_list[self.beam_id].interp(az_array=source_az,
   320  205.141 MiB -22298.898 MiB                                                    za_array=source_za,
   321  175.109 MiB -22363.504 MiB                                                    freq_array=freq)
   322
   323                                     # interp_data has shape: (Naxes_vec, Nspws, Nfeeds, 1 (freq), 1 (source position))
   324  175.109 MiB -9153.969 MiB           jones_matrix = np.zeros((2, 2), dtype=np.complex)
   325                                     # first axis is feed, second axis is theta, phi (opposite order of beam!)
   326  175.109 MiB -9153.969 MiB           jones_matrix[0, 0] = interp_data[1, 0, 0, 0, 0]
   327  175.109 MiB -9153.969 MiB           jones_matrix[1, 1] = interp_data[0, 0, 1, 0, 0]
   328  175.109 MiB -9153.969 MiB           jones_matrix[0, 1] = interp_data[0, 0, 0, 0, 0]
   329  175.109 MiB -9153.969 MiB           jones_matrix[1, 0] = interp_data[1, 0, 1, 0, 0]
   330
   331  175.109 MiB -9153.969 MiB           return jones_matrix


Filename: /Users/djacobs/anaconda/envs/HERA/lib/python2.7/site-packages/pyuvsim-0.0.1-py2.7.egg/pyuvsim/uvsim.py

Line #    Mem usage    Increment   Line Contents
================================================
   340  177.238 MiB 2774.883 MiB       @profile
   341                                 def __init__(self, antenna1, antenna2):
   342  177.238 MiB  -49.172 MiB           self.antenna1 = antenna1
   343  177.238 MiB  -49.172 MiB           self.antenna2 = antenna2
   344  177.238 MiB  -49.172 MiB           self.enu = antenna2.pos_enu - antenna1.pos_enu
   345                                     # we're using the local az/za frame so uvw is just enu
   346  177.238 MiB  -49.172 MiB           self.uvw = self.enu


Filename: /Users/djacobs/anaconda/envs/HERA/lib/python2.7/site-packages/pyuvsim-0.0.1-py2.7.egg/pyuvsim/uvsim.py

Line #    Mem usage    Increment   Line Contents
================================================
   359  177.242 MiB 112757.527 MiB       @profile
   360                                 def __init__(self, source, time, freq, baseline, telescope):
   361  177.242 MiB -4919.531 MiB           self.time = time
   362  177.242 MiB -4919.531 MiB           self.freq = freq
   363  177.242 MiB -4919.531 MiB           self.source = source
   364  177.242 MiB -4919.531 MiB           self.baseline = baseline
   365  177.242 MiB -4919.531 MiB           self.telescope = telescope
   366  177.242 MiB -4919.527 MiB           self.visibility_vector = None
   367  177.242 MiB -4919.531 MiB           self.uvdata_index = None        # Where to add the visibility in the uvdata object.


Filename: /Users/djacobs/anaconda/envs/HERA/lib/python2.7/site-packages/pyuvsim-0.0.1-py2.7.egg/pyuvsim/uvsim.py

Line #    Mem usage    Increment   Line Contents
================================================
   396  205.137 MiB 34382.613 MiB       @profile
   397                                 def __init__(self, task):   # task_array  = list of tuples (source,time,freq,uvw)
   398                                     # self.rank
   399  205.137 MiB -11080.570 MiB           self.task = task
   400                                     # Initialize task.time to a Time object.
   401  205.137 MiB -11080.570 MiB           if isinstance(self.task.time, float):
   402  205.137 MiB -11080.562 MiB               self.task.time = Time(self.task.time, format='jd')
   403  205.137 MiB -11080.562 MiB           if isinstance(self.task.freq, float):
   404  205.137 MiB -11080.562 MiB               self.task.freq = self.task.freq * units.Hz


Filename: /Users/djacobs/anaconda/envs/HERA/lib/python2.7/site-packages/pyuvsim-0.0.1-py2.7.egg/pyuvsim/uvsim.py

Line #    Mem usage    Increment   Line Contents
================================================
   410  205.137 MiB 34382.621 MiB       @profile
   411                                 def apply_beam(self):
   412                                     # Supply jones matrices and their coordinate. Knows current coords of visibilities, applies rotations.
   413                                     # for every antenna calculate the apparent jones flux
   414                                     # Beam --> Takes coherency matrix alt/az to ENU
   415  205.137 MiB -11080.562 MiB           baseline = self.task.baseline
   416  205.137 MiB -11080.562 MiB           source = self.task.source
   417                                     # coherency is a 2x2 matrix
   418                                     # (Ex^2 conj(Ex)Ey, conj(Ey)Ex Ey^2)
   419                                     # where x and y vectors along the local za/az coordinates.
   420  205.137 MiB -11080.562 MiB           beam1_jones = baseline.antenna1.get_beam_jones(self.task.telescope,
   421  205.137 MiB -11080.562 MiB                                                          source.az_za_calc(self.task.time,
   422  205.141 MiB 34382.992 MiB                                                                            self.task.telescope.telescope_location),
   423  175.109 MiB 34315.438 MiB                                                          self.task.freq)
   424  175.109 MiB -4545.980 MiB           beam2_jones = baseline.antenna2.get_beam_jones(self.task.telescope,
   425  175.109 MiB -4545.980 MiB                                                          source.az_za_calc(self.task.time,
   426  175.109 MiB 34250.480 MiB                                                                            self.task.telescope.telescope_location),
   427  175.109 MiB 34253.434 MiB                                                          self.task.freq)
   428  175.109 MiB -4607.988 MiB           this_apparent_coherency = np.dot(beam1_jones,
   429  175.109 MiB -4607.988 MiB                                            source.coherency_calc(self.task.time,
   430  175.109 MiB 34253.484 MiB                                                                  self.task.telescope.telescope_location))
   431  175.109 MiB -4607.988 MiB           this_apparent_coherency = np.dot(this_apparent_coherency,
   432  175.109 MiB -4607.984 MiB                                            (beam2_jones.conj().T))
   433
   434  175.109 MiB -4607.988 MiB           self.apparent_coherency = this_apparent_coherency


Filename: /Users/djacobs/anaconda/envs/HERA/lib/python2.7/site-packages/pyuvsim-0.0.1-py2.7.egg/pyuvsim/uvsim.py

Line #    Mem usage    Increment   Line Contents
================================================
   436  205.137 MiB 34382.621 MiB       @profile
   437                                 def make_visibility(self):
   438                                     # dimensions?
   439                                     # polarization, ravel index (freq,time,source)
   440  175.109 MiB 34253.488 MiB           self.apply_beam()
   441
   442  175.109 MiB 34197.434 MiB           pos_lmn = self.task.source.pos_lmn(self.task.time, self.task.telescope.telescope_location)
   443
   444                                     # need to convert uvws from meters to wavelengths
   445  175.109 MiB -4664.008 MiB           assert(isinstance(self.task.freq, Quantity))
   446  175.109 MiB -4664.008 MiB           uvw_wavelength = self.task.baseline.uvw / const.c * self.task.freq.to('1/s')
   447  175.109 MiB -4663.984 MiB           fringe = np.exp(2j * np.pi * np.dot(uvw_wavelength, pos_lmn))
   448
   449  175.109 MiB -4664.031 MiB           vij = self.apparent_coherency * fringe
   450                                     # need to reshape to be [xx, yy, xy, yx]
   451  175.109 MiB -4664.031 MiB           vis_vector = [vij[0, 0], vij[1, 1], vij[0, 1], vij[1, 0]]
   452
   453                                     # Temporary -- write out task and other things to file.
   454  175.109 MiB -4664.031 MiB           bl = str(self.task.baseline.antenna1.number) + "_" + str(self.task.baseline.antenna2.number)
   455  175.109 MiB -4664.031 MiB           return np.array(vis_vector)


Filename: /Users/djacobs/anaconda/envs/HERA/lib/python2.7/site-packages/pyuvsim-0.0.1-py2.7.egg/pyuvsim/uvsim.py

Line #    Mem usage    Increment   Line Contents
================================================
   484  177.238 MiB  462.477 MiB   @profile
   485                             def uvdata_to_task_list(input_uv, sources, beam_list, beam_dict=None):
   486                                 """Create task list from pyuvdata compatible input file.
   487
   488                                 Returns: List of task parameters to be send to UVEngines
   489                                 List has task parameters defined in UVTask object
   490                                 This function extracts time, freq, Antenna1, Antenna2
   491                                 """
   492  177.238 MiB   -8.195 MiB       if not isinstance(input_uv, UVData):
   493                                     raise TypeError("input_uv must be UVData object")
   494
   495  177.238 MiB   -8.195 MiB       if not isinstance(sources, np.ndarray):
   496                                     raise TypeError("sources must be a numpy array")
   497
   498  177.238 MiB   -8.195 MiB       freq = input_uv.freq_array[0, :]  # units.Hz
   499
   500  177.238 MiB   -8.195 MiB       telescope = Telescope(input_uv.telescope_name,
   501  177.238 MiB   -8.195 MiB                             EarthLocation.from_geocentric(*input_uv.telescope_location, unit='m'),
   502  177.238 MiB  462.477 MiB                             beam_list)
   503
   504  177.238 MiB   -8.195 MiB       if len(beam_list) > 1 and beam_dict is not None:
   505                                     raise ValueError('beam_dict must be supplied if beam_list has more than one element.')
   506
   507  177.238 MiB   -8.195 MiB       times = input_uv.time_array
   508
   509  177.238 MiB   -8.195 MiB       antpos_ECEF = input_uv.antenna_positions + input_uv.telescope_location
   510  177.238 MiB   -8.195 MiB       antpos_ENU = uvutils.ENU_from_ECEF(antpos_ECEF.T,
   511  177.238 MiB   -8.191 MiB                                          *input_uv.telescope_location_lat_lon_alt).T
   512  177.238 MiB   -8.195 MiB       antenna_names = input_uv.antenna_names
   513  177.238 MiB   -8.195 MiB       antennas = []
   514  177.238 MiB  -32.781 MiB       for num, antname in enumerate(antenna_names):
   515  177.238 MiB  -24.586 MiB           if beam_dict is None:
   516  177.238 MiB  -24.586 MiB               beam_id = 0
   517                                     else:
   518                                         beam_id = beam_dict[antname]
   519  177.238 MiB 1387.441 MiB           antennas.append(Antenna(antname, num, antpos_ENU[num], beam_id))
   520
   521  177.238 MiB   -8.195 MiB       baselines = []
   522  177.238 MiB   -8.195 MiB       print('Generating Baselines')
   523  177.238 MiB  -57.367 MiB       for count, antnum1 in enumerate(input_uv.ant_1_array):
   524  177.238 MiB  -49.172 MiB           antnum2 = input_uv.ant_2_array[count]
   525  177.238 MiB  -49.172 MiB           index1 = np.where(input_uv.antenna_numbers == antnum1)[0][0]
   526  177.238 MiB  -49.172 MiB           index2 = np.where(input_uv.antenna_numbers == antnum2)[0][0]
   527  177.238 MiB 2774.883 MiB           baselines.append(Baseline(antennas[index1], antennas[index2]))
   528
   529  177.238 MiB   -8.195 MiB       baselines = np.array(baselines)
   530
   531  177.238 MiB   -8.195 MiB       blts_index = np.arange(input_uv.Nblts)
   532  177.238 MiB   -8.195 MiB       frequency_index = np.arange(input_uv.Nfreqs)
   533  177.238 MiB   -8.195 MiB       source_index = np.arange(len(sources))
   534  177.238 MiB   -8.195 MiB       print('Making Meshgrid')
   535  177.242 MiB   -8.191 MiB       blts_ind, freq_ind, source_ind = np.meshgrid(blts_index, frequency_index, source_index)
   536  177.242 MiB   -8.199 MiB       print('Raveling')
   537  177.242 MiB   -8.199 MiB       blts_ind = blts_ind.ravel()
   538  177.242 MiB   -8.199 MiB       freq_ind = freq_ind.ravel()
   539  177.242 MiB   -8.199 MiB       source_ind = source_ind.ravel()
   540
   541  177.242 MiB   -8.199 MiB       uvtask_list = []
   542  177.242 MiB   -8.199 MiB       print('Making Tasks')
   543  177.242 MiB   -8.199 MiB       print('Number of tasks:', len(blts_ind))
   544
   545  177.242 MiB   -8.199 MiB       if progsteps or progbar:
   546  177.242 MiB   -8.199 MiB           count = 0
   547  177.242 MiB   -8.199 MiB           tot = len(blts_ind)
   548  177.242 MiB   -8.199 MiB           if progbar:
   549  177.242 MiB   -8.199 MiB               pbar = progressbar.ProgressBar(maxval=tot).start()
   550                                     else:
   551                                         pbar = utils.progsteps(maxval=tot)
   552
   553  177.242 MiB   -8.199 MiB       for (bl, freqi, t, source, blti, fi) in izip(baselines[blts_ind],
   554  177.242 MiB   -8.199 MiB                                                    freq[freq_ind], times[blts_ind],
   555  177.242 MiB   -8.199 MiB                                                    sources[source_ind], blts_ind,
   556  177.242 MiB -4927.730 MiB                                                    freq_ind):
   557
   558  177.242 MiB 112757.531 MiB           task = UVTask(source, t, freqi, bl, telescope)
   559  177.242 MiB -4919.531 MiB           task.uvdata_index = (blti, 0, fi)    # 0 = spectral window index
   560  177.242 MiB -4919.531 MiB           uvtask_list.append(task)
   561
   562  177.242 MiB -4919.531 MiB           if progbar or progsteps:
   563  177.242 MiB -4919.531 MiB               count += 1
   564  177.242 MiB -4919.531 MiB               pbar.update(count)
   565
   566  177.242 MiB   -8.199 MiB       if progbar:
   567  177.242 MiB   -8.199 MiB           pbar.finish()
   568  177.242 MiB   -8.199 MiB       return uvtask_list


Filename: /Users/djacobs/anaconda/envs/HERA/lib/python2.7/site-packages/pyuvsim-0.0.1-py2.7.egg/pyuvsim/uvsim.py

Line #    Mem usage    Increment   Line Contents
================================================
   571  177.242 MiB  462.492 MiB   @profile
   572                             def initialize_uvdata(uvtask_list):
   573                                 # writing 4 pol polarization files now
   574
   575                                 # Assume all tasks have the same telescope.
   576                                 #   Enforce this generally!
   577
   578  177.242 MiB   -8.199 MiB       task_freqs = []
   579  177.242 MiB   -8.199 MiB       task_bls = []
   580  177.242 MiB   -8.199 MiB       task_times = []
   581  177.242 MiB   -8.199 MiB       task_antnames = []
   582  177.242 MiB   -8.199 MiB       task_antnums = []
   583  177.242 MiB   -8.199 MiB       task_antpos = []
   584  177.242 MiB   -8.199 MiB       task_uvw = []
   585  177.242 MiB   -8.199 MiB       ant_1_array = []
   586  177.242 MiB   -8.199 MiB       ant_2_array = []
   587  177.242 MiB   -8.199 MiB       telescope_name = uvtask_list[0].telescope.telescope_name
   588  177.242 MiB   -8.199 MiB       telescope_location = uvtask_list[0].telescope.telescope_location.geocentric
   589
   590  177.242 MiB   -8.199 MiB       source_0 = uvtask_list[0].source
   591  177.242 MiB   -8.199 MiB       freq_0 = uvtask_list[0].freq
   592  177.242 MiB -4927.730 MiB       for task in uvtask_list:
   593  177.242 MiB -4919.531 MiB           if not task.source == source_0:
   594  177.242 MiB -4870.336 MiB               continue
   595  177.242 MiB  -49.195 MiB           task_freqs.append(task.freq)
   596
   597  177.242 MiB  -49.195 MiB           if task.freq == freq_0:
   598  177.242 MiB  -49.195 MiB               task_bls.append(task.baseline)
   599  177.242 MiB  -49.195 MiB               task_times.append(task.time)
   600  177.242 MiB  -49.195 MiB               task_antnames.append(task.baseline.antenna1.name)
   601  177.242 MiB  -49.195 MiB               task_antnames.append(task.baseline.antenna2.name)
   602  177.242 MiB  -49.195 MiB               ant_1_array.append(task.baseline.antenna1.number)
   603  177.242 MiB  -49.195 MiB               ant_2_array.append(task.baseline.antenna2.number)
   604  177.242 MiB  -49.195 MiB               task_antnums.append(task.baseline.antenna1.number)
   605  177.242 MiB  -49.195 MiB               task_antnums.append(task.baseline.antenna2.number)
   606  177.242 MiB  -49.195 MiB               task_antpos.append(task.baseline.antenna1.pos_enu)
   607  177.242 MiB  -49.195 MiB               task_antpos.append(task.baseline.antenna2.pos_enu)
   608  177.242 MiB  -49.195 MiB               task_uvw.append(task.baseline.uvw)
   609
   610  177.242 MiB   -8.188 MiB       antnames, ant_indices = np.unique(task_antnames, return_index=True)
   611  177.242 MiB   -8.199 MiB       task_antnums = np.array(task_antnums)
   612  177.242 MiB   -8.199 MiB       task_antpos = np.array(task_antpos)
   613  177.242 MiB   -8.199 MiB       antnums = task_antnums[ant_indices]
   614  177.242 MiB   -8.195 MiB       antpos = task_antpos[ant_indices]
   615
   616  177.242 MiB   -8.199 MiB       freqs = np.unique(task_freqs)
   617
   618  177.242 MiB   -8.172 MiB       uv_obj = UVData()
   619  177.242 MiB   -8.199 MiB       uv_obj.telescope_name = telescope_name
   620  177.242 MiB  -32.797 MiB       uv_obj.telescope_location = np.array([tl.to('m').value for tl in telescope_location])
   621  177.242 MiB   -8.199 MiB       uv_obj.instrument = telescope_name
   622  177.242 MiB   -8.199 MiB       uv_obj.Nfreqs = freqs.size
   623  177.242 MiB   -8.199 MiB       uv_obj.Ntimes = np.unique(task_times).size
   624  177.242 MiB   -8.199 MiB       uv_obj.Nants_data = antnames.size
   625  177.242 MiB   -8.199 MiB       uv_obj.Nants_telescope = uv_obj.Nants_data
   626  177.242 MiB   -8.199 MiB       uv_obj.Nblts = len(ant_1_array)
   627
   628  177.242 MiB   -8.199 MiB       uv_obj.antenna_names = antnames.tolist()
   629  177.242 MiB   -8.199 MiB       uv_obj.antenna_numbers = antnums
   630  177.242 MiB   -8.199 MiB       antpos_ecef = uvutils.ECEF_from_ENU(antpos.T, *uv_obj.telescope_location_lat_lon_alt).T - uv_obj.telescope_location
   631  177.242 MiB   -8.199 MiB       uv_obj.antenna_positions = antpos_ecef
   632  177.242 MiB   -8.199 MiB       uv_obj.ant_1_array = np.array(ant_1_array)
   633  177.242 MiB   -8.199 MiB       uv_obj.ant_2_array = np.array(ant_2_array)
   634  177.242 MiB   -8.199 MiB       uv_obj.time_array = np.array(task_times)
   635  177.242 MiB   -8.199 MiB       uv_obj.uvw_array = np.array(task_uvw)
   636  177.242 MiB   -8.199 MiB       uv_obj.baseline_array = uv_obj.antnums_to_baseline(ant_1_array, ant_2_array)
   637  177.242 MiB   -8.195 MiB       uv_obj.Nbls = np.unique(uv_obj.baseline_array).size
   638  177.242 MiB   -8.199 MiB       if uv_obj.Nfreqs == 1:
   639  177.242 MiB   -8.199 MiB           uv_obj.channel_width = 1.  # Hz
   640                                 else:
   641                                     uv_obj.channel_width = np.diff(freqs)[0]
   642
   643  177.242 MiB   -8.199 MiB       if uv_obj.Ntimes == 1:
   644  177.242 MiB   -8.199 MiB           uv_obj.integration_time = 1.  # Second
   645                                 else:
   646                                     uv_obj.integration_time = np.diff(np.unique(task_times))[0]
   647  177.242 MiB   -8.680 MiB       uv_obj.set_lsts_from_time_array()
   648  177.242 MiB   -8.695 MiB       uv_obj.zenith_ra = uv_obj.lst_array
   649  177.242 MiB   -8.695 MiB       uv_obj.zenith_dec = np.repeat(uv_obj.telescope_location_lat_lon_alt[0], uv_obj.Nblts)  # Latitude
   650  177.242 MiB   -8.695 MiB       uv_obj.object_name = 'zenith'
   651  177.242 MiB   -8.695 MiB       uv_obj.set_drift()
   652  177.242 MiB   -8.695 MiB       uv_obj.vis_units = 'Jy'
   653  177.242 MiB   -8.695 MiB       uv_obj.polarization_array = np.array([-5, -6, -7, -8])
   654  177.242 MiB   -8.695 MiB       uv_obj.spw_array = np.array([0])
   655  177.242 MiB   -8.695 MiB       uv_obj.freq_array = np.array([freqs])
   656
   657  177.242 MiB   -8.695 MiB       uv_obj.Nspws = uv_obj.spw_array.size
   658  177.242 MiB   -8.695 MiB       uv_obj.Npols = uv_obj.polarization_array.size
   659
   660  177.242 MiB   -8.695 MiB       uv_obj.data_array = np.zeros((uv_obj.Nblts, uv_obj.Nspws, uv_obj.Nfreqs, uv_obj.Npols), dtype=np.complex)
   661  177.242 MiB   -8.695 MiB       uv_obj.flag_array = np.zeros((uv_obj.Nblts, uv_obj.Nspws, uv_obj.Nfreqs, uv_obj.Npols), dtype=bool)
   662  177.242 MiB   -8.695 MiB       uv_obj.nsample_array = np.ones_like(uv_obj.data_array, dtype=float)
   663  177.242 MiB   -8.695 MiB       uv_obj.history = 'UVSim'
   664
   665  177.242 MiB   -8.695 MiB       uv_obj.check()
   666
   667  177.242 MiB   -8.695 MiB       return uv_obj


Filename: /Users/djacobs/anaconda/envs/HERA/lib/python2.7/site-packages/pyuvsim-0.0.1-py2.7.egg/pyuvsim/uvsim.py

Line #    Mem usage    Increment   Line Contents
================================================
   670  178.301 MiB  528.680 MiB   @profile
   671                             def serial_gather(uvtask_list, uv_out):
   672                                 """
   673                                     Initialize uvdata object, loop over uvtask list, acquire visibilities,
   674                                     and add to uvdata object.
   675                                 """
   676  178.301 MiB  -43.559 MiB       for task in uvtask_list:
   677  178.301 MiB  -37.336 MiB           blt_ind, spw_ind, freq_ind = task.uvdata_index
   678  178.301 MiB  -37.336 MiB           uv_out.data_array[blt_ind, spw_ind, freq_ind, :] += task.visibility_vector
   679
   680  178.301 MiB   -6.223 MiB       return uv_out


Filename: /Users/djacobs/anaconda/envs/HERA/lib/python2.7/site-packages/pyuvsim-0.0.1-py2.7.egg/pyuvsim/uvsim.py

Line #    Mem usage    Increment   Line Contents
================================================
   683  177.238 MiB  438.586 MiB   @profile
   684                             def create_mock_catalog(time, arrangement='zenith', array_location=None, Nsrcs=None, zen_ang=None, save=False):
   685                                 """
   686                                     Create mock catalog with test sources at zenith.
   687
   688                                     arrangment = Choose test point source pattern (default = 1 source at zenith)
   689                                     Keywords:
   690                                         Nsrcs = Number of sources to put at zenith
   691                                         array_location = EarthLocation object.
   692                                         zen_ang = For off-zenith and triangle arrangements, how far from zenith to place sources. (deg)
   693                                         save = Save mock catalog as npz file.
   694                                     Accepted arrangements:
   695                                         'triangle' = Three point sources forming a triangle around the zenith
   696                                         'cross'    = An asymmetric cross
   697                                         'horizon'  = A single source on the horizon   ## TODO
   698                                         'zenith'   = Some number of sources placed at the zenith.
   699                                         'off-zenith' = A single source off zenith
   700                                         'long-line' = Horizon to horizon line of point sources
   701                                         'hera_text' = Spell out HERA around the zenith
   702
   703                                 """
   704
   705  177.238 MiB   -8.199 MiB       if array_location is None:
   706  177.238 MiB   -8.199 MiB           array_location = EarthLocation(lat='-30d43m17.5s', lon='21d25m41.9s',
   707  177.238 MiB   -8.195 MiB                                          height=1073.)
   708  177.238 MiB   -8.199 MiB       freq = (150e6 * units.Hz)
   709
   710  177.238 MiB   -8.199 MiB       if arrangement not in ['off-zenith', 'zenith', 'cross', 'triangle', 'long-line', 'hera_text']:
   711                                     raise KeyError("Invalid mock catalog arrangement" + str(arrangement))
   712
   713  177.238 MiB   -8.199 MiB       if arrangement == 'off-zenith':
   714                                     if zen_ang is None:
   715                                         zen_ang = 5.0  # Degrees
   716                                     Nsrcs = 1
   717                                     alts = [90. - zen_ang]
   718                                     azs = [90.]   # 0 = North pole, 90. = East pole
   719                                     fluxes = [1.0]
   720
   721  177.238 MiB   -8.199 MiB       if arrangement == 'triangle':
   722                                     Nsrcs = 3
   723                                     if zen_ang is None:
   724                                         zen_ang = 3.0
   725                                     alts = [90. - zen_ang, 90. - zen_ang, 90. - zen_ang]
   726                                     azs = [0., 120., 240.]
   727                                     fluxes = [1.0, 1.0, 1.0]
   728
   729  177.238 MiB   -8.199 MiB       if arrangement == 'cross':
   730                                     Nsrcs = 4
   731                                     alts = [88., 90., 86., 82.]
   732                                     azs = [270., 0., 90., 135.]
   733                                     fluxes = [5., 4., 1.0, 2.0]
   734
   735  177.238 MiB   -8.199 MiB       if arrangement == 'zenith':
   736                                     if Nsrcs is None:
   737                                         Nsrcs = 1
   738                                     alts = np.ones(Nsrcs) * 90.
   739                                     azs = np.zeros(Nsrcs, dtype=float)
   740                                     fluxes = np.ones(Nsrcs) * 1 / Nsrcs
   741                                     # Divide total Stokes I intensity among all sources
   742                                     # Test file has Stokes I = 1 Jy
   743  177.238 MiB   -8.199 MiB       if arrangement == 'long-line':
   744  177.238 MiB   -8.199 MiB           if 'Nsrcs' is None:
   745                                         Nsrcs = 10
   746  177.238 MiB   -8.195 MiB           fluxes = np.ones(Nsrcs, dtype=float)
   747  177.238 MiB   -8.195 MiB           zas = np.linspace(-85, 85, Nsrcs)
   748  177.238 MiB   -8.195 MiB           alts = 90. - zas
   749  177.238 MiB   -8.195 MiB           azs = np.zeros(Nsrcs, dtype=float)
   750  177.238 MiB   -8.195 MiB           inds = np.where(alts > 90.0)
   751  177.238 MiB   -8.191 MiB           azs[inds] = 180.
   752  177.238 MiB   -8.191 MiB           alts[inds] = 90. + zas[inds]
   753
   754  177.238 MiB   -8.195 MiB       if arrangement == 'hera_text':
   755
   756                                     azs = np.array([-254.055, -248.199, -236.310, -225.000, -206.565,
   757                                                     -153.435, -123.690, -111.801, -105.945, -261.870,
   758                                                     -258.690, -251.565, -135.000, -116.565, -101.310,
   759                                                     -98.130, 90.000, 90.000, 90.000, 90.000, 90.000,
   760                                                     -90.000, -90.000, -90.000, -90.000, -90.000,
   761                                                     -90.000, 81.870, 78.690, 71.565, -45.000, -71.565,
   762                                                     -78.690, -81.870, 74.055, 68.199, 56.310, 45.000,
   763                                                     26.565, -26.565, -45.000, -56.310, -71.565])
   764
   765                                     zas = np.array([7.280, 5.385, 3.606, 2.828, 2.236, 2.236, 3.606,
   766                                                     5.385, 7.280, 7.071, 5.099, 3.162, 1.414, 2.236,
   767                                                     5.099, 7.071, 7.000, 6.000, 5.000, 3.000, 2.000,
   768                                                     1.000, 2.000, 3.000, 5.000, 6.000, 7.000, 7.071,
   769                                                     5.099, 3.162, 1.414, 3.162, 5.099, 7.071, 7.280,
   770                                                     5.385, 3.606, 2.828, 2.236, 2.236, 2.828, 3.606, 6.325])
   771
   772                                     alts = 90. - zas
   773                                     Nsrcs = zas.size
   774                                     fluxes = np.ones_like(azs)
   775
   776  177.238 MiB   -8.195 MiB       catalog = []
   777
   778  177.238 MiB   -8.191 MiB       source_coord = SkyCoord(alt=Angle(alts, unit=units.deg), az=Angle(azs, unit=units.deg),
   779  177.238 MiB   -8.180 MiB                               obstime=time, frame='altaz', location=array_location)
   780  177.238 MiB   15.656 MiB       icrs_coord = source_coord.transform_to('icrs')
   781
   782  177.238 MiB   -8.195 MiB       ra = icrs_coord.ra
   783  177.238 MiB   -8.195 MiB       dec = icrs_coord.dec
   784  177.238 MiB -827.727 MiB       for si in range(Nsrcs):
   785  177.238 MiB 18792.875 MiB           catalog.append(Source('src' + str(si), ra[si], dec[si], freq, [fluxes[si], 0, 0, 0]))
   786  177.238 MiB   -8.195 MiB       if rank == 0 and save:
   787                                     np.savez('mock_catalog', ra=ra.rad, dec=dec.rad)
   788
   789  177.238 MiB   -8.195 MiB       catalog = np.array(catalog)
   790  177.238 MiB   -8.195 MiB       return catalog


Filename: /Users/djacobs/anaconda/envs/HERA/lib/python2.7/site-packages/pyuvsim-0.0.1-py2.7.egg/pyuvsim/uvsim.py

Line #    Mem usage    Increment   Line Contents
================================================
   815  177.238 MiB  462.477 MiB   @profile
   816                             def run_uvsim(input_uv, beam_list, catalog=None, Nsrcs=None, mock_arrangement='zenith'):
   817                                 """Run uvsim."""
   818  177.238 MiB   -8.195 MiB       if not isinstance(input_uv, UVData):
   819                                     raise TypeError("input_uv must be UVData object")
   820
   821                                 # The Head node will initialize our simulation
   822                                 # Read input file and make uvtask list
   823  177.238 MiB   -8.195 MiB       uvtask_list = []
   824  177.238 MiB   -8.195 MiB       if rank == 0:
   825  177.238 MiB   -8.195 MiB           print('Nblts:', input_uv.Nblts)
   826  177.238 MiB   -8.195 MiB           print('Nfreqs:', input_uv.Nfreqs)
   827
   828  177.238 MiB   -8.195 MiB           time = Time(input_uv.time_array[0], scale='utc', format='jd')
   829  177.238 MiB   -8.195 MiB           if catalog is None:
   830                                         array_loc = EarthLocation.from_geocentric(*input_uv.telescope_location, unit='m')
   831                                         if Nsrcs is not None:
   832                                             print("Nsrcs:", Nsrcs)
   833                                             catalog = create_mock_catalog(time, arrangement=mock_arrangement, array_location=array_loc, Nsrcs=Nsrcs)
   834                                         else:
   835                                             catalog = create_mock_catalog(time, arrangement=mock_arrangement, array_location=array_loc)
   836
   837  177.242 MiB  462.492 MiB           uvtask_list = uvdata_to_task_list(input_uv, catalog, beam_list)
   838  177.242 MiB  462.059 MiB           uv_container = initialize_uvdata(uvtask_list)
   839                                     # To split into PUs make a list of lists length NPUs
   840  177.242 MiB   -8.695 MiB           print("Splitting Task List")
   841  177.242 MiB   -8.695 MiB           uvtask_list = np.array_split(uvtask_list, Npus)
   842  177.242 MiB  -34.781 MiB           uvtask_list = [list(tl) for tl in uvtask_list]
   843
   844  177.242 MiB   -8.695 MiB           print("Sending Tasks To Processing Units")
   845                                 # Scatter the task list among all available PUs
   846  205.137 MiB  102.309 MiB       local_task_list = comm.scatter(uvtask_list, root=0)
   847  205.137 MiB   -1.602 MiB       if rank == 0:
   848  205.137 MiB   -1.602 MiB           print("Tasks Received. Begin Calculations.")
   849  205.137 MiB   -1.602 MiB       summed_task_dict = {}
   850
   851  205.137 MiB   -1.602 MiB       if rank == 0:
   852  205.137 MiB   -1.602 MiB           if progsteps or progbar:
   853  205.137 MiB   -1.602 MiB               count = 0
   854  205.137 MiB   -1.602 MiB               tot = len(local_task_list)
   855  205.137 MiB   -1.602 MiB               if progbar:
   856  205.137 MiB   -1.602 MiB                   pbar = progressbar.ProgressBar(maxval=tot).start()
   857                                         else:
   858                                             pbar = utils.progsteps(maxval=tot)
   859
   860  205.137 MiB -4665.633 MiB           for count, task in enumerate(local_task_list):
   861  205.137 MiB 34382.621 MiB               engine = UVEngine(task)
   862  205.137 MiB -11080.562 MiB               if task.uvdata_index not in summed_task_dict.keys():
   863  205.137 MiB -142.781 MiB                   summed_task_dict[task.uvdata_index] = task
   864  205.137 MiB -11080.562 MiB               if summed_task_dict[task.uvdata_index].visibility_vector is None:
   865  175.105 MiB  893.406 MiB                   summed_task_dict[task.uvdata_index].visibility_vector = engine.make_visibility()
   866                                         else:
   867  175.109 MiB 33304.051 MiB                   summed_task_dict[task.uvdata_index].visibility_vector += engine.make_visibility()
   868
   869  175.109 MiB -4664.020 MiB               if progbar or progsteps:
   870  175.109 MiB -4664.031 MiB                   pbar.update(count)
   871
   872  156.195 MiB -191.082 MiB           if progbar or progsteps:
   873  156.195 MiB   -5.672 MiB               pbar.finish()
   874                                 else:
   875                                     for task in local_task_list:
   876                                         engine = UVEngine(task)
   877                                         if task.uvdata_index not in summed_task_dict.keys():
   878                                             summed_task_dict[task.uvdata_index] = task
   879                                         if summed_task_dict[task.uvdata_index].visibility_vector is None:
   880                                             summed_task_dict[task.uvdata_index].visibility_vector = engine.make_visibility()
   881                                         else:
   882                                             summed_task_dict[task.uvdata_index].visibility_vector += engine.make_visibility()
   883
   884  156.195 MiB   -5.672 MiB       if rank == 0:
   885  156.195 MiB   -5.672 MiB           print("Calculations Complete.")
   886
   887                                 # All the sources in this summed list are foobar-ed
   888                                 # Source are summed over but only have 1 name
   889                                 # Some source may be correct
   890  156.195 MiB   -5.672 MiB       summed_local_task_list = summed_task_dict.values()
   891                                 # gather all the finished local tasks into a list of list of len NPUs
   892                                 # gather is a blocking communication, have to wait for all PUs
   893  178.301 MiB  135.102 MiB       full_tasklist = comm.gather(summed_local_task_list, root=0)
   894
   895                                 # Concatenate the list of lists into a flat list of tasks
   896  178.301 MiB   -6.223 MiB       if rank == 0:
   897  178.301 MiB   -6.223 MiB           uvtask_list = sum(full_tasklist, [])
   898  178.301 MiB  528.680 MiB           uvdata_out = serial_gather(uvtask_list, uv_container)
   899
   900  178.301 MiB   -6.223 MiB           return uvdata_out
